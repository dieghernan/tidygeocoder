% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reverse_geo.R
\name{reverse_geo}
\alias{reverse_geo}
\title{Reverse geocode coordinates}
\usage{
reverse_geo(
  lat,
  long,
  method = "osm",
  address = address,
  limit = 1,
  min_time = NULL,
  api_url = NULL,
  timeout = 20,
  mode = "",
  full_results = FALSE,
  unique_only = FALSE,
  return_coords = TRUE,
  flatten = TRUE,
  batch_limit = 10000,
  verbose = FALSE,
  no_query = FALSE,
  custom_query = list(),
  iq_region = "us",
  geocodio_v = 1.6,
  mapbox_permanent = FALSE,
  here_request_id = NULL
)
}
\arguments{
\item{lat}{latitude values (input data)}

\item{long}{longitude values (input data)}

\item{method}{the geocoder service to be used. Refer to 
\code{\link{api_parameter_reference}} and the API documentation for
each geocoder service for usage details and limitations. Note that the 
Census service does not support reverse geocoding.
\itemize{
  \item \code{"osm"}: Nominatim (OSM). Worldwide coverage.
  \item \code{"geocodio"}: Commercial geocoder. Covers US and Canada and has
     batch geocoding capabilities. Requires an API Key to be stored in
     the "GEOCODIO_API_KEY" environmental variable.
  \item \code{"iq"}: Commercial Nominatim geocoder service. Requires an API Key to
     be stored in the "LOCATIONIQ_API_KEY" environmental variable.
  \item \code{"google"}: Commercial Google geocoder service. Requires an API Key to
     be stored in the "GOOGLEGEOCODE_API_KEY" environmental variable.
  \item \code{"opencage"}: Commercial geocoder with
     \href{https://opencagedata.com/credits}{various open data sources} (e.g.
     OpenStreetMap). Requires an API Key to be stored
     in the "OPENCAGE_KEY" environmental variable.
  \item \code{"mapbox"}: Commercial Mapbox geocoder service. Requires an API Key to
     be stored in the "MAPBOX_API_KEY" environmental variable.
  \item \code{"here"}: Commercial HERE geocoder service. Requires an API Key 
     to be stored in the "HERE_API_KEY" environmental variable. Can perform 
     batch geocoding.
  \item \code{"tomtom"}: Commercial TomTom geocoder service. Requires an API Key to
     be stored in the "TOMTOM_API_KEY" environmental variable. Can perform
     batch geocoding.
}}

\item{address}{name of the address column (output data)}

\item{limit}{number of results to return per coordinate. Note that not all methods support
setting limit to a value other than 1. Also limit > 1 is not compatible 
with batch geocoding if return_coords = TRUE.}

\item{min_time}{minimum amount of time for a query to take (in seconds). If NULL
then min_time will be set to the lowest value that complies with the usage requirements of 
the free tier of the selected geocoder service.}

\item{api_url}{custom API URL. If specified, the default API URL will be overridden.
This parameter can be used to specify a local Nominatim server.}

\item{timeout}{query timeout (in minutes)}

\item{mode}{set to 'batch' to force batch geocoding or 'single' to 
force single address geocoding (one coordinate per query). If not 
specified then batch geocoding will be used if available
(given method selected) when multiple addresses are provided; otherwise
single address geocoding will be used. For 'here' the batch mode
should be explicitly enforced.}

\item{full_results}{returns all data from the geocoder service if TRUE. 
If FALSE then only a single address column will be returned from the geocoder service.}

\item{unique_only}{only return results for unique addresses if TRUE}

\item{return_coords}{return input coordinates with results if TRUE. Note that
most services return the input coordinates with full_results = TRUE and setting
return_addresses to FALSE does not prevent this.}

\item{flatten}{if TRUE then any nested dataframes in results are flattened if possible.
Note that Geocodio batch geocoding results are flattened regardless.}

\item{batch_limit}{limit to the number of addresses in a batch geocoding query.
Both geocodio and census batch geocoders have a 10,000 limit so this
is the default. HERE has a 1,000,000 address limit.}

\item{verbose}{if TRUE then detailed logs are output to the console}

\item{no_query}{if TRUE then no queries are sent to the geocoder and verbose is set to TRUE}

\item{custom_query}{API-specific parameters to be used, passed as a named list 
(ie. \code{list(extratags = 1)}).}

\item{iq_region}{'us' (default) or 'eu'. Used for establishing API URL for the 'iq' method}

\item{geocodio_v}{version of geocodio api. Used for establishing API URL
for the 'geocodio' method.}

\item{mapbox_permanent}{if TRUE then the \code{mapbox.places-permanent} 
endpoint would be used. Note that this option should be used only if you 
have applied for a permanent account. Unsuccessful requests made by an 
account that does not have access to the endpoint may be billable.}

\item{here_request_id}{This parameter would return a previous HERE batch job,
identified by its RequestID. The RequestID of a batch job is displayed 
when \code{verbose} is TRUE. Note that this option would ignore the 
current \code{lat, long} parameters on the request, so \code{return_coords} 
needs to be FALSE.}
}
\value{
parsed geocoding results in tibble format
}
\description{
Reverse geocodes geographic coordinates (latitude and longitude) given as numeric values. 
Latitude and longitude inputs are limited to possible values. Latitudes must be between -90 and 90 and
longitudes must be between -180 and 180. Invalid values will not be sent to the geocoder service. 
The \code{\link{reverse_geocode}} function utilizes this function on coordinates contained in dataframes.
See example usage in \code{vignette("tidygeocoder")}.

This function uses the \code{\link{get_api_query}}, \code{\link{query_api}}, and
\code{\link{extract_reverse_results}} functions to create, execute, and parse the geocoder
API queries.
}
\examples{
\donttest{
 reverse_geo(lat = 38.895865, long = -77.0307713, method = 'osm', verbose = TRUE)
 
 reverse_geo(lat = c(38.895865, 43.6534817, 300), 
 long = c(-77.0307713, -79.3839347, 600), method = 'osm', full_results = TRUE, verbose = TRUE)
 
}
}
\seealso{
\code{\link{geocode}} \code{\link{api_parameter_reference}}
}
